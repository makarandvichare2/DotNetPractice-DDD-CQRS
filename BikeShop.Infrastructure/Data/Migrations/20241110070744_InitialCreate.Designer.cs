// <auto-generated />
using System;
using BikeShop.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BikeShop.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241110070744_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BikeShop.Core.Bike.Bike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BikeModelId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<Guid>("Ref")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("BikeShop.Core.BikeModels.BikeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BikeModels");
                });

            modelBuilder.Entity("BikeShop.Core.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BikeShop.Core.Manufacturers.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("BikeShop.Core.Bike.Bike", b =>
                {
                    b.OwnsOne("BikeShop.Core.Bike.Colour", "Colour", b1 =>
                        {
                            b1.Property<int>("BikeId")
                                .HasColumnType("int");

                            b1.Property<string>("ColourCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ColourCode");

                            b1.HasKey("BikeId");

                            b1.ToTable("Bikes");

                            b1.WithOwner()
                                .HasForeignKey("BikeId");
                        });

                    b.OwnsOne("BikeShop.Core.Bike.Price", "Price", b1 =>
                        {
                            b1.Property<int>("BikeId")
                                .HasColumnType("int");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Price_Currency");

                            b1.Property<decimal>("PriceValue")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price_PriceValue");

                            b1.HasKey("BikeId");

                            b1.ToTable("Bikes");

                            b1.WithOwner()
                                .HasForeignKey("BikeId");
                        });

                    b.OwnsOne("BikeShop.Core.Bike.Weight", "Weight", b1 =>
                        {
                            b1.Property<int>("BikeId")
                                .HasColumnType("int");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Weight_Unit");

                            b1.Property<decimal>("WeightValue")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Weight_WeightValue");

                            b1.HasKey("BikeId");

                            b1.ToTable("Bikes");

                            b1.WithOwner()
                                .HasForeignKey("BikeId");
                        });

                    b.Navigation("Colour")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Weight")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
